#!/usr/bin/python

# dump1090 statistics plugin for Munin
# Copyright (c) 2017 David King
# https://github.com/strix-technica/ADSB-tools
#
# NB:
#   * Requires geopy and a fairly recent version of dump1090.  Tested with
#     dump1090-mutability.
#   * Receiver latitude and longitude must be set on the dump1090 command
#     line or this programme will throw an exception.
#   * This is a wildcard plugin and requires special installation.  See
#     README.md for installation and usage instructions.
#
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import collections
from geopy.distance import vincenty
import json
from math import radians, cos, sin, asin, sqrt
import os
import sys
import time

KM_PER_FT = 0.0003048

# --- Configuration begins ---
RX_ALT_KM = KM_PER_FT * 108 # feet

JSON_DATA =  '/run/dump1090-mutability'
STATS_FILE = os.path.join( JSON_DATA, 'stats.json' )
RECVR_FILE = os.path.join( JSON_DATA, 'receiver.json' )

# altitude hysteresis: a/c are level if alt difference < +- ALT_HIST
# Set fairly high to distinguish between FL changes and departure/arrivals
ALT_HIST   = 4500
# --- Configuration ends ---

CONFIG = {
        'ac': """\
multigraph dump1090_ac_n
graph_title ADS-B aircraft count
graph_category dump1090
graph_vlabel count

n.label Aircraft count
n_pos.label Aircraft (with position) count
n_des.label Aircraft descending
n_des.draw LINESTACK1
n_lvl.label Aircraft level
n_lvl.draw LINESTACK1
n_asc.label Aircraft ascending
n_asc.draw LINESTACK1

multigraph dump1090_ac_n_pct
graph_title ADS-B aircraft altitude change
graph_category dump1090
graph_vlabel %
graph_order n_des=dump1090_ac_n.n_des n_asc=dump1090_ac_n.n_asc n_lvl=dump1090_ac_n.n_lvl n_pos=dump1090_ac_n.n_pos

p_des.label Aircraft descending
p_des.cdef n_des,n_pos,/,100,*
p_des.draw AREA
p_lvl.label Aircraft level
p_lvl.cdef n_lvl,n_pos,/,100,*
p_lvl.draw STACK
p_asc.label Aircraft ascending
p_asc.cdef n_asc,n_pos,/,100,*
p_asc.draw STACK
n_des.graph no
n_asc.graph no
n_lvl.graph no
n_pos.graph no

multigraph dump1090_ac_range
graph_title ADS-B aircraft distance
graph_category dump1090
graph_vlabel nm

avg_range.label Average distance
max_range.label Maximum distance
""",
        'cpu': """\
graph_title ADS-B CPU utilisation
graph_category dump1090
graph_vlabel %

usb.label USB wait
usb.draw LINESTACK1
bg.label Network I/O
bg.draw LINESTACK1
demod.label Demodulation
demod.draw LINESTACK1
""",
        'messages': """\
graph_title ADS-B message count
graph_category dump1090
graph_vlabel messages/second

good0.label Good Mode S messages
good0.draw LINESTACK1
good1.label Good Mode S messages (1 bit error)
good1.draw LINESTACK1
good2.label Good Mode S messages (2 bit error)
good2.draw LINESTACK1
""",
        'quality': """\
graph_title ADS-B signal quality problems
graph_category dump1090
graph_vlabel %
graph_order bad unknown good sp_track
graph_args -A -l 0

bad.label Bad Mode-S messages
bad.draw AREA
unknown.label Unknown Mode-S messages
unknown.draw STACK
good.label Good Mode-S messages
good.draw STACK
sp_track.label Single-point tracks
sp_track.draw LINE1
""",
        'signal': """\
graph_title ADS-B signal strength
graph_category dump1090
graph_vlabel dBFS

mean.label Mean signal strength
peak.label Peak signal strength
noise.label Noise floor
mean_snr.label Mean signal SNR
mean_snr.cdef mean,noise,-
mean_snr.colour 330099
peak_snr.label Peak signal SNR
peak_snr.cdef peak,noise,-
peak_snr.colour 440057
""",
        'tracks': """\
graph_title ADS-B track count
graph_category dump1090
graph_vlabel count

total.label Total tracks
single.label Single-point tracks
""",
        }


def do_config( which ):
    """
    Output Munin config data
    """
    print CONFIG[which],
    exit(0)


def do_fetch( which ):
    """
    Output recorded Munin data
    """
    if which == 'ac':
        # Read statistics and receiver location; altitude is set at top of file
        with open( RECVR_FILE ) as f:
            receiver = json.load( f )
        n_hist = int( receiver['history'] )
        rx_pos = (receiver['lat'], receiver['lon'], RX_ALT_KM,)
        data = []
        for i in range( n_hist ):
            fn = os.path.join( JSON_DATA, 'history_%s.json' % (i,) )
            with open( fn ) as f:
                d = json.load( f )
            data.append( (d['now'], d['aircraft'],) )
        data.sort()

        # Count unique aircraft and distance from receiver for last 5 mins
        ac_n     = set()
        ac_n_pos = collections.defaultdict( lambda: {'alt_s': None, 'alt_e': None,} )
        dist = []
        for ts, d in data[-10:]: # ten 30 second intervals = 5 mins
            for ac in d:
                ac_n.add( ac['hex'] )
                if 'lat' in ac and 'lon' in ac and 'nav_altitude_mcp' in ac:
                    if ac['nav_altitude_mcp'] == 'ground':
                        ac['nav_altitude_mcp'] = 0
                    if ac_n_pos[ac['hex']]['alt_s'] is None:
                        ac_n_pos[ac['hex']]['alt_s'] = ac['nav_altitude_mcp']
                    ac_n_pos[ac['hex']]['alt_e'] = ac['nav_altitude_mcp']

                    try:
                        d = vincenty( rx_pos, (ac['lat'], ac['lon'], ac['nav_altitude_mcp'] * KM_PER_FT,) ).nm
                    except TypeError:
                        print >>sys.stderr, "couldn't calc distance for a/c at lat %s (%s) lon %s (%s) alt %s (%s) " % (ac['lat'], type(ac['lat']),
                                        ac['lon'], type(ac['lon']),
                                        ac['nav_altitude_mcp'], type(ac['nav_altitude_mcp']),)
                        continue

                    dist.append( d )
        if len(dist) > 0:
            avg_dist = sum( dist ) / len( dist )
            max_dist = max( dist )
        else:
            avg_dist = float('nan')
            max_dist = float('nan')
        alt_asc = alt_des = alt_lvl = 0
        for alts in ac_n_pos.values():
            d = int(alts['alt_e']) - int(alts['alt_s'])
            if d > ALT_HIST:
                alt_asc += 1
            elif d < -ALT_HIST:
                alt_des += 1
            else:
                alt_lvl += 1

        print 'multigraph dump1090_ac_n'
        print 'n.value %s' % (len(ac_n),)
        print 'n_pos.value %s' % (len(ac_n_pos),)
        print 'n_asc.value %s' % (alt_asc,)
        print 'n_lvl.value %s' % (alt_lvl,)
        print 'n_des.value %s' % (alt_des,)

        print 'multigraph dump1090_ac_range'
        print 'avg_range.value %.1f' % (avg_dist,)
        print 'max_range.value %.1f' % (max_dist,)
        return


    with open( STATS_FILE ) as f:
        data = json.load( f )['last5min']

    if which == 'cpu':
        # 300,000 msec per 5 mins, but want percentage
        print 'usb.value %.3f' % (data['cpu']['reader'] / 3000.0,)
        print 'demod.value %.3f' % (data['cpu']['demod'] / 3000.0,)
        print 'bg.value %.3f' % (data['cpu']['background'] / 3000.0,)

    if which == 'messages':
        data['local']['accepted'] += [0] * 3
        print 'good0.value %.1f' % (data['local']['accepted'][0] / (5 * 60.0),)
        print 'good1.value %.1f' % (data['local']['accepted'][1] / (5 * 60.0),)
        print 'good2.value %.1f' % (data['local']['accepted'][2] / (5 * 60.0),)

    if which == 'quality':
        total = float(data['local']['modes'])

        print 'bad.value %.3f' % (float(data['local']['bad']) / total * 100,)
        print 'unknown.value %.3f' % (float(data['local']['unknown_icao']) / total * 100,)
        print 'good.value %.3f' % (float(sum(data['local']['accepted'])) / total * 100,)

        print 'sp_track.value %.3f' % (float(data['tracks']['single_message']) / float(data['tracks']['all']) * 100,)
    if which == 'signal':
        print 'mean.value %.1f' % (data['local']['signal'],)
        print 'peak.value %.1f' % (data['local']['peak_signal'],)
        print 'noise.value %.1f' % (data['local']['noise'],)

    if which == 'tracks':
        print 'total.value %.1f' % (data['tracks']['all'],)
        print 'single.value %.1f' % (data['tracks']['single_message'],)


if __name__ == '__main__':
    which = sys.argv[0].rsplit( '_', 1 )[1]

    if len(sys.argv) == 2 and sys.argv[1] == 'config':
        do_config( which )
    else:
        do_fetch( which )


# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
